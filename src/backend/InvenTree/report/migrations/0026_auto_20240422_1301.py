# Generated by Django 4.2.11 on 2024-04-22 13:01

import os

from django.db import migrations
from django.core.files.base import ContentFile


def label_model_map():
    """Map legacy label template models to model_type values."""

    return {
        "stockitemlabel": "stockitem",
        "stocklocationlabel": "stocklocation",
        "partlabel": "part",
        "buildlinelabel": "buildline",
    }


def forward(apps, schema_editor):
    """Run forwards migrations.
    
    - Create a new LabelTemplate instance for each existing legacy label template.
    """

    LabelTemplate = apps.get_model('report', 'labeltemplate')

    count = 0

    for template_class, model_type in label_model_map().items():
        model = apps.get_model('label', template_class)

        for template in model.objects.all():
            # Construct a new LabelTemplate instance

            filename = template.label.path

            if '/label/inventree/' in filename:
                # Do not migrate internal label templates
                continue

            filename = os.path.basename(filename)
            filedata = template.label.open('r').read()

            name = template.name
            offset = 1

            # Prevent duplicate names during migration
            while LabelTemplate.objects.filter(name=name, model_type=model_type).exists():
                name = template.name + f"_{offset}"
                offset += 1

            LabelTemplate.objects.create(
                name=name,
                template=ContentFile(filedata, filename),
                model_type=model_type,
                description=template.description,
                revision=1,
                filters=template.filters,
                filename_pattern=template.filename_pattern,
                enabled=template.enabled,
                width=template.width,
                height=template.height,
            )

            count += 1

    if count > 0:
        print(f"Migrated {count} report templates to new LabelTemplate model.")

def reverse(apps, schema_editor):
    """Run reverse migrations.
    
    - Delete any LabelTemplate instances in the database
    """

    LabelTemplate = apps.get_model('report', 'labeltemplate')

    n = LabelTemplate.objects.count()

    if n > 0:
        for item in LabelTemplate.objects.all():
            item.template.delete()
            item.delete()

        print(f"Deleted {n} LabelTemplate objects and templates")

class Migration(migrations.Migration):

    dependencies = [
        ('report', '0025_labeltemplate'),
    ]

    operations = [
        migrations.RunPython(forward, reverse_code=reverse)
    ]

